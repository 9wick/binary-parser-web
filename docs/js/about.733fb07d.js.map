{"version":3,"sources":["webpack:///./src/views/BleHci.vue","webpack:///./src/parser/ble/hci/att.ts","webpack:///./src/parser/ble/hci/index.ts","webpack:///./src/views/BleHci.vue?e370","webpack:///./src/views/BleHci.vue?2e29"],"names":["getParser","AttErrorCodes","meaning","AttOpCodes","choice","p","uint8","uint16le","tag","meanings","list2meaning","enum","list","1","p2","array","type","p3","hex","length","readUntil","2","buffer","attParser","parser","aclStartParser","6","5","4","onHciAclDataParser","bit4","0","onHciLeEventParser","onHciEventParser","this","BleHciParser","endianess","components","ParserView","render"],"mappings":"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","file":"js/about.733fb07d.js","sourcesContent":["<template>\n  <div>\n    <h1>BLE HCI analyze</h1>\n    <br />\n    <br />\n    <ParserView :getParser=\"getParser\"></ParserView>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Options, Vue } from 'vue-class-component';\nimport { BleHciParser } from '@/parser/ble/hci';\nimport ParserView from '@/components/ParserView.vue';\n\n@Options({\n  components: {\n    ParserView,\n  },\n})\nexport default class BleHci extends Vue {\n  getParser() {\n    return BleHciParser;\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped></style>\n","import { CustomParser, getDefaultParser, getNestParser } from '@/parser/util';\n\nconst AttErrorCodes = {\n  0x01: { meaning: 'Invalid Handle' },\n  0x02: { meaning: 'Read Not Permitted' },\n  0x03: { meaning: 'Write Not Permitted' },\n  0x04: { meaning: 'Invalid PDU' },\n  0x05: { meaning: 'Insufficient Authentication' },\n  0x06: { meaning: 'Request Not Supported' },\n  0x07: { meaning: 'Invalid Offset' },\n  0x08: { meaning: 'Insufficient Authorization' },\n  0x09: { meaning: 'Prepare Queue Full' },\n  0x0a: { meaning: 'Attribute Not Found' },\n  0x0b: { meaning: 'Attribute Not Long' },\n  0x0c: { meaning: 'Insufficient Encryption Key Size' },\n  0x0d: { meaning: 'Invalid Attribute Value Length' },\n  0x0e: { meaning: 'Unlikely Error' },\n  0x0f: { meaning: 'Insufficient Encryption' },\n  0x10: { meaning: 'Unsupported Group Type' },\n  0x11: { meaning: 'Insufficient Resources' },\n  0x12: { meaning: 'Database Out Of Sync' },\n  0x13: { meaning: 'Value Not Allowed' },\n};\n\nconst AttOpCodes = {\n  0x01: {\n    meaning: 'Error Response',\n    choice: getNestParser(p => {\n      p.uint8('erroredOpCode')\n        .uint16le('handle')\n        .uint8('errorCode')\n        .meaning('errorCodeString', {\n          tag: 'errorCode',\n          meanings: CustomParser.list2meaning(AttErrorCodes),\n        });\n    }),\n  },\n  0x02: {\n    meaning: 'Exchange MTU Request',\n    choice: getNestParser(p => p.uint16le('client Rx mtu size')),\n  },\n  0x03: {\n    meaning: 'Exchange MTU Response',\n    choice: getNestParser(p => p.uint16le('server Rx mtu size')),\n  },\n  0x04: {\n    meaning: 'Find Information Request',\n    choice: getNestParser(p => p.uint16le('startHandle').uint16le('endHandle')),\n  },\n  0x05: {\n    meaning: 'Find Information Response',\n    choice: getDefaultParser(p =>\n      p.enum('format', 'uint8', {\n        list: {\n          1: {\n            meaning: '16bit uuid',\n            choice: getNestParser(p2 => {\n              p2.array('uuids', {\n                type: getNestParser(p3 => {\n                  p3.uint16le('handle').hex('uuid', {\n                    length: 2,\n                  });\n                }),\n                readUntil: 'eof',\n              });\n            }),\n          },\n          2: {\n            meaning: '128bit uuid',\n            choice: getNestParser(p2 => {\n              p2.array('uuids', {\n                type: getNestParser(p3 => {\n                  p3.uint16le('handle').hex('uuid', {\n                    length: 16,\n                  });\n                }),\n                readUntil: 'eof',\n              });\n            }),\n          },\n        },\n      })\n    ),\n  },\n  0x06: {\n    meaning: 'Find By Type Value Request',\n    choice: getNestParser(p => p.uint16le('startHandle').uint16le('endHandle'))\n      .uint16le('attributeType')\n      .buffer('attributeValue', { readUntil: 'eof' }),\n  },\n  0x07: { meaning: 'Find By Type Value Response' },\n  0x08: { meaning: 'Read By Type Request' },\n  0x09: { meaning: 'Read By Type Response' },\n  0x0a: { meaning: 'Read Request' },\n  0x0b: { meaning: 'Read Response' },\n  0x0c: { meaning: 'Read Blob Request' },\n  0x0d: { meaning: 'Read Blob Response' },\n  0x0e: { meaning: 'Read Multiple Request' },\n  0x0f: { meaning: 'Read Multiple Response' },\n  0x10: { meaning: 'Read by Group Type Request' },\n  0x11: { meaning: 'Read by Group Type Response' },\n  0x12: { meaning: 'Write Request' },\n  0x13: { meaning: 'Write Response' },\n  0x16: { meaning: 'Prepare Write Request' },\n  0x17: { meaning: 'Prepare Write Response' },\n  0x18: { meaning: 'Execute Write Request' },\n  0x19: { meaning: 'Execute Write Response' },\n  0x1b: { meaning: 'Handle Value Notification' },\n  0x1d: { meaning: 'Handle Value Indication' },\n  0x1e: { meaning: 'Handle Value Confirmation' },\n  0x52: { meaning: 'Write command' },\n  0xd2: { meaning: 'Signed Write command' },\n};\n\nexport const attParser = getDefaultParser(parser => {\n  parser.enum('opCode', 'uint8', {\n    list: AttOpCodes,\n  });\n});\n","import { getDefaultParser, getNestParser } from '@/parser/util';\nimport { BleAdvertisementParser } from '@/parser/ble/adv';\nimport { attParser } from '@/parser/ble/hci/att';\n\nconst HciErrorCodes = {\n  0x00: { meaning: 'Success' },\n  0x01: { meaning: 'Unknown HCI Command' },\n  0x02: { meaning: 'Unknown Connection Identifier' },\n  0x03: { meaning: 'Hardware Failure' },\n  0x04: { meaning: 'Page Timeout' },\n  0x05: { meaning: 'Authentication Failure' },\n  0x06: { meaning: 'PIN or Key Missing' },\n  0x07: { meaning: 'Memory Capacity Exceeded' },\n  0x08: { meaning: 'Connection Timeout' },\n  0x09: { meaning: 'Connection Limit Exceeded' },\n  0x0a: { meaning: 'Synchronous Connection Limit To A Device Exceeded' },\n  0x0b: { meaning: 'Connection Already Exists' },\n  0x0c: { meaning: 'Command Disallowed' },\n  0x0d: { meaning: 'Connection Rejected due to Limited Resources' },\n  0x0e: { meaning: 'Connection Rejected Due To Security Reasons' },\n  0x0f: { meaning: 'Connection Rejected due to Unacceptable BD_ADDR' },\n  0x10: { meaning: 'Connection Accept Timeout Exceeded' },\n  0x11: { meaning: 'Unsupported Feature or Parameter Value' },\n  0x12: { meaning: 'Invalid HCI Command Parameters' },\n  0x13: { meaning: 'Remote User Terminated Connection' },\n  0x14: {\n    meaning: 'Remote Device Terminated Connection due to Low Resources ',\n  },\n  0x15: { meaning: 'Remote Device Terminated Connection due to Power Off' },\n  0x16: { meaning: 'Connection Terminated By Local Host' },\n  0x17: { meaning: 'Repeated Attempts' },\n  0x18: { meaning: 'Pairing Not Allowed' },\n  0x19: { meaning: 'Unknown LMP PDU' },\n  0x1a: { meaning: 'Unsupported Remote Feature / Unsupported LMP Feature' },\n  0x1b: { meaning: 'SCO Offset Rejected' },\n  0x1c: { meaning: 'SCO Interval Rejected' },\n  0x1d: { meaning: 'SCO Air Mode Rejected' },\n  0x1e: { meaning: 'Invalid LMP Parameters / Invalid LL Parameters' },\n  0x1f: { meaning: 'Unspecified Error' },\n  0x20: {\n    meaning:\n      'Unsupported LMP Parameter Value / Unsupported LL Parameter Value ',\n  },\n  0x21: { meaning: 'Role Change Not Allowed' },\n  0x22: { meaning: 'LMP Response Timeout / LL Response Timeout' },\n  0x23: {\n    meaning: 'LMP Error Transaction Collision / LL Procedure Collision ',\n  },\n  0x24: { meaning: 'LMP PDU Not Allowed' },\n  0x25: { meaning: 'Encryption Mode Not Acceptable' },\n  0x26: { meaning: 'Link Key cannot be Changed' },\n  0x27: { meaning: 'Requested QoS Not Supported' },\n  0x28: { meaning: 'Instant Passed' },\n  0x29: { meaning: 'Pairing With Unit Key Not Supported' },\n  0x2a: { meaning: 'Different Transaction Collision' },\n  0x2b: { meaning: 'Reserved for future use' },\n  0x2c: { meaning: 'QoS Unacceptable Parameter' },\n  0x2d: { meaning: 'QoS Rejected' },\n  0x2e: { meaning: 'Channel Classification Not Supported' },\n  0x2f: { meaning: 'Insufficient Security' },\n  0x30: { meaning: 'Parameter Out Of Mandatory Range' },\n  0x31: { meaning: 'Reserved for future use' },\n  0x32: { meaning: 'Role Switch Pending' },\n  0x33: { meaning: 'Reserved for future use' },\n  0x34: { meaning: 'Reserved Slot Violation' },\n  0x35: { meaning: 'Role Switch Failed' },\n  0x36: { meaning: 'Extended Inquiry Response Too Large' },\n  0x37: { meaning: 'Secure Simple Pairing Not Supported By Host' },\n  0x38: { meaning: 'Host Busy - Pairing' },\n  0x39: { meaning: 'Connection Rejected due to No Suitable Channel Found' },\n  0x3a: { meaning: 'Controller Busy' },\n  0x3b: { meaning: 'Unacceptable Connection Parameters' },\n  0x3c: { meaning: 'Advertising Timeout' },\n  0x3d: { meaning: 'Connection Terminated due to MIC Failure' },\n  0x3e: {\n    meaning: 'Connection Failed to be Established / Synchronization Timeout ',\n  },\n  0x3f: { meaning: 'MAC Connection Failed' },\n  0x40: {\n    meaning:\n      'Coarse Clock Adjustment Rejected but Will Try to Adjust Using Clock Dragging ',\n  },\n  0x41: { meaning: 'Type0 Submap Not Defined' },\n  0x42: { meaning: 'Unknown Advertising Identifier' },\n  0x43: { meaning: 'Limit Reached' },\n  0x44: { meaning: 'Operation Cancelled by Host' },\n  0x45: { meaning: 'Packet Too Long' },\n};\n\nconst aclStartParser = getDefaultParser(parser => {\n  parser.uint16le('length').enum('cid', 'uint16le', {\n    list: {\n      6: { meaning: 'SMP' },\n      5: { meaning: 'SIGNALING' },\n      4: { meaning: 'ATT', choice: attParser },\n    },\n  });\n});\n\nconst onHciAclDataParser = getDefaultParser(parser => {\n  parser\n    .uint8('handle_l')\n    .bit4('flags')\n    .bit4('handle_h')\n    .uint16le('length')\n    .enum('flags', null, {\n      list: {\n        2: { meaning: 'ACL_START', choice: aclStartParser },\n        1: { meaning: 'ACL_CONTINUE' },\n        0: { meaning: 'ACL_START_NO_FLUSH', choice: aclStartParser },\n      },\n    });\n});\n\nconst onHciLeEventParser = getDefaultParser(parser => {\n  parser.enum('subEventCode', 'uint8', {\n    list: {\n      0x01: { meaning: 'LE Connection Complete' },\n      0x02: { meaning: 'LE Advertising Report' },\n      0x03: { meaning: 'LE Connection Update Complete' },\n      0x04: { meaning: 'LE Read Remote Used Features Complete' },\n      0x05: { meaning: 'LE Long Term Key Requested' },\n      0x06: { meaning: 'LE Remote Connection Parameter Request' },\n      0x07: { meaning: 'LE Data Length Change' },\n      0x08: { meaning: 'LE Read Local P256 Public Key Complete' },\n      0x09: { meaning: 'LE Generate DHKey Complete' },\n      0x0a: { meaning: 'LE Enhanced Connection Complete' },\n      0x0b: { meaning: 'LE Direct Advertising Report' },\n    },\n  });\n});\nconst onHciEventParser = getDefaultParser(parser => {\n  parser\n    .uint8('eventCode')\n    .uint8('length')\n    .enum('eventCode', null, {\n      list: {\n        0x05: { meaning: 'Disconnection Complete' },\n        0x08: { meaning: 'Encryption Change' },\n        0x0c: { meaning: 'Read Remote Version Information Complete' },\n        0x0e: { meaning: 'Command Complete' },\n        0x0f: { meaning: 'Command Status' },\n        0x10: { meaning: 'Hardware Error (optional)' },\n        0x13: {\n          meaning: 'Number Of Completed Packets',\n          choice: getDefaultParser(p => {\n            p.uint8('number of handle')\n              .array('connection handles', {\n                type: 'uint16le',\n                length: function() {\n                  // @ts-ignore\n                  return this['number of handle'];\n                },\n              })\n              .array('num of completed packets', {\n                type: 'uint16le',\n                length: function() {\n                  // @ts-ignore\n                  return this['number of handle'];\n                },\n              });\n          }),\n        },\n        0x1a: { meaning: 'Data Buffer Overflow' },\n        0x30: { meaning: 'Encryption Key Refresh Complete' },\n        0x57: { meaning: 'Authenticated Payload Timeout Expired' },\n        0x3e: { meaning: 'LE Events', choice: onHciLeEventParser },\n      },\n    });\n});\n\nexport const BleHciParser = getDefaultParser(parser => {\n  parser.endianess('little').enum('evnetType', 'uint8', {\n    list: {\n      2: { meaning: 'HCI_ACLDATA_PKT', choice: onHciAclDataParser },\n      4: { meaning: 'HCI_EVENT_PKT', choice: onHciEventParser },\n    },\n  });\n  // .meaning('typeMeaning', { tag: 'type', meanings: { 1: 'adv' } })\n  // .choice('data', { tag: 'type', choices: { 1: BleAdvertisementParser } });\n});\n","\nimport { Options, Vue } from 'vue-class-component';\nimport { BleHciParser } from '@/parser/ble/hci';\nimport ParserView from '@/components/ParserView.vue';\n\n@Options({\n  components: {\n    ParserView,\n  },\n})\nexport default class BleHci extends Vue {\n  getParser() {\n    return BleHciParser;\n  }\n}\n","import { render } from \"./BleHci.vue?vue&type=template&id=1c77e69b\"\nimport script from \"./BleHci.vue?vue&type=script&lang=ts\"\nexport * from \"./BleHci.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}